import { useMemo, useState } from 'react';
import { Copy, Code, FileText } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/hooks/use-toast';
import { downloadZipPackage } from '@/utils/download';
import { FaviconPackage } from '@/pages/Index';
import { formatFileSize } from '@/utils/fileUtils';
import { motion } from 'framer-motion';

interface CodeGeneratorProps {
  faviconPackage: FaviconPackage;
}

const CodeGenerator = ({ faviconPackage }: CodeGeneratorProps) => {
  const [copied, setCopied] = useState(false);
  const { toast } = useToast();
  const [appName, setAppName] = useState('IcoSmith App');
  const [themeColor, setThemeColor] = useState('#0A0F1E');
  const [bgColor, setBgColor] = useState('#0A0F1E');
  const [maskColor, setMaskColor] = useState('#0f172a');

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
      toast({ title: "Código copiado para a área de transferência!" });
    } catch (error) {
      toast({
        title: "Erro ao copiar",
        description: "Não foi possível copiar o código.",
        variant: "destructive",
      });
    }
  };

  const fullHeadSnippet = useMemo(() => {
    return [
      '<link rel="icon" href="/favicon.ico" sizes="any">',
      '<link rel="icon" href="/favicon.svg" type="image/svg+xml">',
      '<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">',
      '<link rel="manifest" href="/site.webmanifest">',
      `<link rel=\"mask-icon\" href=\"/safari-pinned-tab.svg\" color=\"${maskColor}\">`,
      `<meta name=\"theme-color\" content=\"${themeColor}\">`,
    ].join('\n');
  }, [maskColor, themeColor]);

  const manifestJson = useMemo(() => {
    const json = {
      id: '/',
      name: appName,
      short_name: appName,
      description: 'Icons and favicon manifest generated by IcoSmith',
      start_url: '/',
      scope: '/',
      display: 'standalone',
      theme_color: themeColor,
      background_color: bgColor,
      icons: [
        { src: '/android-chrome-192x192.png', sizes: '192x192', type: 'image/png', purpose: 'any maskable' },
        { src: '/android-chrome-512x512.png', sizes: '512x512', type: 'image/png', purpose: 'any maskable' }
      ]
    };
    return JSON.stringify(json, null, 2);
  }, [appName, themeColor, bgColor]);

  const generateCustomZip = async () => {
    try {
      const { default: JSZip } = await import('jszip');
      const zip = new JSZip();
      faviconPackage.files.forEach(f => zip.file(f.name, f.blob));
      zip.file('site.webmanifest', manifestJson);
      const maskSvg = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64" width="64" height="64"><path fill="#000" d="M20 4h24a16 16 0 0 1 16 16v24a16 16 0 0 1-16 16H20A16 16 0 0 1 4 44V20A16 16 0 0 1 20 4Z"/></svg>`;
      zip.file('safari-pinned-tab.svg', maskSvg);
      const blob = await zip.generateAsync({ type: 'blob' });
      downloadZipPackage(blob, `${faviconPackage.filename}.zip`);
      toast({ title: 'Pacote personalizado gerado!' });
    } catch (e) {
      toast({ title: 'Erro ao gerar pacote', variant: 'destructive' });
    }
  };

  return (
    <motion.div 
      className="bg-gradient-to-br from-orange-500/40 via-transparent to-transparent p-[1px] rounded-xl shadow-[0_0_30px_rgba(249,115,22,0.15)] hover:shadow-[0_0_45px_rgba(249,115,22,0.25)] backdrop-blur-sm transition-all duration-300 ease-in-out"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, ease: "easeOut" }}
    >
      <div className="bg-black/50 rounded-[11px] p-6 h-full w-full">
        <div className="flex items-center gap-2 mb-4">
          <Code className="h-5 w-5 text-primary" />
          <h3 className="text-lg font-semibold">Código de Implementação</h3>
        </div>
        
        <Tabs defaultValue="html" className="w-full">
          <TabsList className="grid w-full grid-cols-4 bg-black/50">
            <TabsTrigger value="html">HTML</TabsTrigger>
            <TabsTrigger value="files">Arquivos Gerados ({faviconPackage.files.length})</TabsTrigger>
            <TabsTrigger value="head">Head completo</TabsTrigger>
            <TabsTrigger value="manifest">manifest.json</TabsTrigger>
          </TabsList>
          <TabsContent value="html" className="mt-4">
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <p className="text-sm text-muted-foreground">
                  Cole este código na tag {'<head>'} do seu site.
                </p>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => copyToClipboard(faviconPackage.htmlCode)}
                >
                  <Copy className="h-4 w-4 mr-2" />
                  {copied ? 'Copiado!' : 'Copiar'}
                </Button>
              </div>
              
              <div className="bg-black/50 rounded-lg p-4 border border-gray-700">
                <pre className="text-sm text-secondary-foreground whitespace-pre-wrap font-mono">
                  {faviconPackage.htmlCode}
                </pre>
              </div>
            </div>
          </TabsContent>
          <TabsContent value="files" className="mt-4">
            <div className="space-y-3">
              <p className="text-sm text-muted-foreground">
                Estes são os arquivos incluídos no seu pacote `.zip`.
              </p>
              <div className="border border-gray-700 rounded-lg">
                {faviconPackage.files.map((file, index) => (
                  <div 
                    key={index}
                    className="flex items-center justify-between p-3 border-b border-gray-700 last:border-b-0"
                  >
                    <div className="flex items-center gap-3">
                      <FileText className="h-5 w-5 text-muted-foreground" />
                      <span className="font-mono text-sm">{file.name}</span>
                    </div>
                    <span className="text-sm text-muted-foreground font-mono">
                      {formatFileSize(file.blob.size)}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </TabsContent>
          <TabsContent value="head" className="mt-4">
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <p className="text-sm text-muted-foreground">Cole este bloco dentro de {'<head>'} do seu site (favicon + svg + apple + manifest + mask-icon + theme-color).</p>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => copyToClipboard(fullHeadSnippet)}
                >
                  <Copy className="h-4 w-4 mr-2" />
                  {copied ? 'Copiado!' : 'Copiar'}
                </Button>
              </div>
              <div className="bg-black/50 rounded-lg p-4 border border-gray-700">
                <pre className="text-sm text-secondary-foreground whitespace-pre-wrap font-mono">
{fullHeadSnippet}
                </pre>
              </div>
            </div>
          </TabsContent>
          <TabsContent value="manifest" className="mt-4">
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <p className="text-sm text-muted-foreground mb-1">App name</p>
                  <input value={appName} onChange={(e) => setAppName(e.target.value)} className="w-full bg-black/40 border border-white/20 rounded px-2 py-2" />
                </div>
                <div>
                  <p className="text-sm text-muted-foreground mb-1">theme_color</p>
                  <input type="color" value={themeColor} onChange={(e) => setThemeColor(e.target.value)} className="w-12 h-10 bg-black/40 border border-white/20 rounded" />
                </div>
                <div>
                  <p className="text-sm text-muted-foreground mb-1">background_color</p>
                  <input type="color" value={bgColor} onChange={(e) => setBgColor(e.target.value)} className="w-12 h-10 bg-black/40 border border-white/20 rounded" />
                </div>
              </div>
              <div>
                <p className="text-sm text-muted-foreground mb-1">mask-icon color</p>
                <input type="color" value={maskColor} onChange={(e) => setMaskColor(e.target.value)} className="w-12 h-10 bg-black/40 border border-white/20 rounded" />
              </div>
              <div className="flex items-center justify-between">
                <p className="text-sm text-muted-foreground">manifest.json gerado (inclui 192/512). Copie e coloque em <code>/site.webmanifest</code> ou no arquivo do seu projeto.</p>
                <Button variant="ghost" size="sm" onClick={() => copyToClipboard(manifestJson)}>
                  <Copy className="h-4 w-4 mr-2" />
                  {copied ? 'Copiado!' : 'Copiar'}
                </Button>
              </div>
              <div className="bg-black/50 rounded-lg p-4 border border-gray-700">
                <pre className="text-sm text-secondary-foreground whitespace-pre-wrap font-mono">{manifestJson}</pre>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </motion.div>
  );
};

export default CodeGenerator;
