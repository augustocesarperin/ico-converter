import { motion } from "framer-motion";
import { Copy, Code, FileText } from "lucide-react";
import { useEffect, useMemo, useState } from "react";
import { useTranslation } from "react-i18next";

import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import { FaviconPackage } from "@/pages/Index";
import { trackEvent } from "@/utils/analytics";
import { downloadZipPackage } from "@/utils/download";
import { formatFileSize } from "@/utils/fileUtils";

interface CodeGeneratorProps {
  faviconPackage: FaviconPackage;
}

const CodeGenerator = ({ faviconPackage }: CodeGeneratorProps) => {
  const [copied, setCopied] = useState(false);
  const { toast } = useToast();
  const { t } = useTranslation();
  const [appName, setAppName] = useState("IcoSmith App");
  const [themeColor, setThemeColor] = useState("#0A0F1E");
  const [bgColor, setBgColor] = useState("#0A0F1E");
  const [maskColor, setMaskColor] = useState("#0f172a");

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
      toast({ title: "Código copiado para a área de transferência!" });
    } catch {
      toast({
        title: "Erro ao copiar",
        description: "Não foi possível copiar o código.",
        variant: "destructive",
      });
    }
  };

  const fullHeadSnippet = useMemo(() => {
    return [
      '<link rel="icon" href="/favicon.ico" sizes="any">',
      '<link rel="icon" href="/favicon.svg" type="image/svg+xml">',
      '<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">',
      '<link rel="manifest" href="/site.webmanifest">',
      `<link rel="mask-icon" href="/safari-pinned-tab.svg" color="${maskColor}">`,
      `<meta name="theme-color" content="${themeColor}">`,
    ].join("\n");
  }, [maskColor, themeColor]);

  const manifestJson = useMemo(() => {
    const json = {
      id: "/",
      name: appName,
      short_name: appName,
      description: "Icons and favicon manifest generated by IcoSmith",
      start_url: "/",
      scope: "/",
      display: "standalone",
      theme_color: themeColor,
      background_color: bgColor,
      icons: [
        {
          src: "/android-chrome-192x192.png",
          sizes: "192x192",
          type: "image/png",
          purpose: "any maskable",
        },
        {
          src: "/android-chrome-512x512.png",
          sizes: "512x512",
          type: "image/png",
          purpose: "any maskable",
        },
      ],
    };
    return JSON.stringify(json, null, 2);
  }, [appName, themeColor, bgColor]);

  // no-op: custom zip generation was removed, as Windows/PWA zips are provided directly

  const [tab, setTab] = useState("html");

  useEffect(() => {
    const handleHash = () => {
      const hash = window.location.hash.replace("#", "");
      if (["html", "files", "head", "manifest", "windows"].includes(hash)) {
        setTab(hash);
      }
    };
    handleHash();
    window.addEventListener("hashchange", handleHash);
    return () => window.removeEventListener("hashchange", handleHash);
  }, []);

  return (
    <motion.div
      className="rounded-xl bg-gradient-to-br from-orange-500/40 via-transparent to-transparent p-[1px] shadow-[0_0_30px_rgba(249,115,22,0.15)] backdrop-blur-sm transition-all duration-300 ease-in-out hover:shadow-[0_0_45px_rgba(249,115,22,0.25)]"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, ease: "easeOut" }}
    >
      <div className="h-full w-full rounded-[11px] bg-black/50 p-6">
        <div className="mb-4 flex items-center gap-2">
          <Code className="h-5 w-5 text-primary" />
          <h3 className="text-lg font-semibold">Código de Implementação</h3>
        </div>

        <Tabs value={tab} onValueChange={setTab} className="w-full">
          <TabsList className="grid w-full grid-cols-5 bg-black/50">
            <TabsTrigger value="html">HTML</TabsTrigger>
            <TabsTrigger value="files">
              Arquivos Gerados ({faviconPackage.files.length})
            </TabsTrigger>
            <TabsTrigger value="head">Head completo</TabsTrigger>
            <TabsTrigger value="manifest">manifest.json</TabsTrigger>
            <TabsTrigger value="windows">
              {t("tabs.windows", { defaultValue: "Windows" })}
            </TabsTrigger>
          </TabsList>
          <TabsContent
            value="windows"
            id="windows"
            className="mt-4"
            onFocus={() => trackEvent("open_windows_tab")}
          >
            <div className="space-y-3 text-sm">
              <p>
                {t("windows.info", {
                  defaultValue:
                    "Windows taskbar and Store assets are included when enabled in options.",
                })}
              </p>
              <div className="rounded-lg border border-white/10 bg-black/40 p-3">
                <p className="font-mono text-xs">
                  Package.appxmanifest (UWP/WinAppSDK)
                </p>
                <pre className="mt-2 whitespace-pre-wrap text-xs">
                  {`<uap:VisualElements Square44x44Logo="Assets/${faviconPackage.filename}-44x44.png" ... />
# Coloque também os irmãos qualificados na mesma pasta:
Assets/${faviconPackage.filename}-44x44.targetsize-16.png
Assets/${faviconPackage.filename}-44x44.targetsize-20.png
Assets/${faviconPackage.filename}-44x44.targetsize-24.png
Assets/${faviconPackage.filename}-44x44.targetsize-30.png
Assets/${faviconPackage.filename}-44x44.targetsize-32.png
Assets/${faviconPackage.filename}-44x44.targetsize-40.png
Assets/${faviconPackage.filename}-44x44.targetsize-48.png

# Opcional: variantes sem plating (cores originais do ícone)
Assets/${faviconPackage.filename}-44x44.targetsize-20_altform-unplated.png
Assets/${faviconPackage.filename}-44x44.targetsize-24_altform-unplated.png
Assets/${faviconPackage.filename}-44x44.targetsize-32_altform-unplated.png

# Logo grande (Start/Store)
Assets/${faviconPackage.filename}-Square256x256.png
Assets/${faviconPackage.filename}-Square256x256_unplated.png`}
                </pre>
              </div>
              {faviconPackage.zipBlob && faviconPackage.windowsZipBlob && (
                <div className="flex gap-2 pt-2">
                  <Button
                    onClick={() => {
                      downloadZipPackage(
                        faviconPackage.windowsZipBlob!,
                        `${faviconPackage.filename}-windows-assets.zip`,
                      );
                      trackEvent("download_windows_assets_only");
                    }}
                  >
                    {t("windows.download_assets_only", {
                      defaultValue: "Download Windows assets only",
                    })}
                  </Button>
                </div>
              )}
              <p>
                Dica: desafixe/fixe o app na barra e limpe o cache do Explorer
                caso não atualize.
              </p>
            </div>
          </TabsContent>
          <TabsContent value="html" id="html" className="mt-4">
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <p className="text-sm text-muted-foreground">
                  Cole este código na tag {"<head>"} do seu site.
                </p>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => copyToClipboard(faviconPackage.htmlCode)}
                >
                  <Copy className="mr-2 h-4 w-4" />
                  {copied ? "Copiado!" : "Copiar"}
                </Button>
              </div>

              <div className="rounded-lg border border-gray-700 bg-black/50 p-4">
                <pre className="whitespace-pre-wrap font-mono text-sm text-secondary-foreground">
                  {faviconPackage.htmlCode}
                </pre>
              </div>
            </div>
          </TabsContent>
          <TabsContent value="files" id="files" className="mt-4">
            <div className="space-y-3">
              <p className="text-sm text-muted-foreground">
                Estes são os arquivos incluídos no seu pacote `.zip`.
              </p>
              <div className="rounded-lg border border-gray-700">
                {faviconPackage.files.map((file, index) => (
                  <div
                    key={index}
                    className="flex items-center justify-between border-b border-gray-700 p-3 last:border-b-0"
                  >
                    <div className="flex items-center gap-3">
                      <FileText className="h-5 w-5 text-muted-foreground" />
                      <span className="font-mono text-sm">{file.name}</span>
                    </div>
                    <span className="font-mono text-sm text-muted-foreground">
                      {formatFileSize(file.blob.size)}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </TabsContent>
          <TabsContent value="head" id="head" className="mt-4">
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <p className="text-sm text-muted-foreground">
                  Cole este bloco dentro de {"<head>"} do seu site (favicon +
                  svg + apple + manifest + mask-icon + theme-color).
                </p>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => copyToClipboard(fullHeadSnippet)}
                >
                  <Copy className="mr-2 h-4 w-4" />
                  {copied ? "Copiado!" : "Copiar"}
                </Button>
              </div>
              <div className="rounded-lg border border-gray-700 bg-black/50 p-4">
                <pre className="whitespace-pre-wrap font-mono text-sm text-secondary-foreground">
                  {fullHeadSnippet}
                </pre>
              </div>
            </div>
          </TabsContent>
          <TabsContent value="manifest" id="manifest" className="mt-4">
            <div className="space-y-4">
              <div className="grid grid-cols-1 gap-4 md:grid-cols-3">
                <div>
                  <label
                    className="mb-1 block text-sm text-muted-foreground"
                    htmlFor="cg-app-name"
                  >
                    App name
                  </label>
                  <input
                    id="cg-app-name"
                    value={appName}
                    onChange={(e) => setAppName(e.target.value)}
                    className="w-full rounded border border-white/20 bg-black/40 px-2 py-2"
                    placeholder="IcoSmith App"
                    title="App name"
                  />
                </div>
                <div>
                  <label
                    className="mb-1 block text-sm text-muted-foreground"
                    htmlFor="cg-theme"
                  >
                    theme_color
                  </label>
                  <input
                    id="cg-theme"
                    type="color"
                    value={themeColor}
                    onChange={(e) => setThemeColor(e.target.value)}
                    className="h-10 w-12 rounded border border-white/20 bg-black/40"
                    title="theme_color"
                  />
                </div>
                <div>
                  <label
                    className="mb-1 block text-sm text-muted-foreground"
                    htmlFor="cg-bg"
                  >
                    background_color
                  </label>
                  <input
                    id="cg-bg"
                    type="color"
                    value={bgColor}
                    onChange={(e) => setBgColor(e.target.value)}
                    className="h-10 w-12 rounded border border-white/20 bg-black/40"
                    title="background_color"
                  />
                </div>
              </div>
              <div>
                <label
                  className="mb-1 block text-sm text-muted-foreground"
                  htmlFor="cg-mask"
                >
                  mask-icon color
                </label>
                <input
                  id="cg-mask"
                  type="color"
                  value={maskColor}
                  onChange={(e) => setMaskColor(e.target.value)}
                  className="h-10 w-12 rounded border border-white/20 bg-black/40"
                  title="mask-icon color"
                />
              </div>
              <div className="flex items-center justify-between">
                <p className="text-sm text-muted-foreground">
                  manifest.json gerado (inclui 192/512). Copie e coloque em{" "}
                  <code>/site.webmanifest</code> ou no arquivo do seu projeto.
                </p>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => copyToClipboard(manifestJson)}
                >
                  <Copy className="mr-2 h-4 w-4" />
                  {copied ? "Copiado!" : "Copiar"}
                </Button>
              </div>
              <div className="rounded-lg border border-gray-700 bg-black/50 p-4">
                <pre className="whitespace-pre-wrap font-mono text-sm text-secondary-foreground">
                  {manifestJson}
                </pre>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </motion.div>
  );
};

export default CodeGenerator;
